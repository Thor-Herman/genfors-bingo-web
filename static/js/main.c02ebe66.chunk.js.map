{"version":3,"sources":["components/BingoCell/index.js","github.svg","components/BingoCell/Abakule-ny.png","App.js","serviceWorker.js","index.js"],"names":["BingoCell","Component","handleClick","this","props","handleCellChange","id","render","className","clicked","onClick","content","App","constructor","super","state","text","chosen_cells","bingo_id","bingo_rows","bingo_cols","bingo_diagonal_down","bingo_diagonal_up","is_bingo","showRules","confirmReset","value","cells","Math","floor","is_full_bingo","every","level2","i","bool","colBingo","j","diagBingoDown","diagBingoUp","rowBingo","newState","setState","localStorage","setItem","JSON","stringify","generateBoard","bingoArray","bingopile","options","pickedText","generatePicks","length","matrix","initState","bind","componentDidMount","getItem","parse","document","title","componentDidUpdate","numberOfLines","picks","k","random","indexOf","src","fireImg","alt","href","logo","map","item","key","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c02ebe66.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./BingoCell.css\";\r\n\r\nclass BingoCell extends Component {\r\n  handleClick = () => {\r\n    this.props.handleCellChange(this.props.id);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={this.props.clicked ? \"cell cell-selected\" : \"cell\"}\r\n        onClick={this.handleClick}\r\n      >\r\n        <p>{this.props.content}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BingoCell;\r\n","export default __webpack_public_path__ + \"static/media/github.4e19cc23.svg\";","export default __webpack_public_path__ + \"static/media/Abakule-ny.9b20bcde.png\";","import React, { Component } from \"react\";\r\nimport BingoCell from \"./components/BingoCell\";\r\nimport \"./App.css\";\r\nimport logo from \"./github.svg\";\r\nimport fireImg from \"./components/BingoCell/Abakule-ny.png\";\r\nimport bingopile from \"./bingo.json\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleCellChange = this.handleCellChange.bind(this);\r\n  }\r\n\r\n  state = {\r\n    text: [],\r\n    chosen_cells: [],\r\n    bingo_id: 0,\r\n    bingo_rows: [],\r\n    bingo_cols: [],\r\n    bingo_diagonal_down: false,\r\n    bingo_diagonal_up: false,\r\n    is_bingo: false,\r\n    showRules: false,\r\n    confirmReset: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!!localStorage.getItem(\"bingoState\")) {\r\n      this.setState(JSON.parse(localStorage.getItem(\"bingoState\")));\r\n    } else {\r\n      this.generateBoard();\r\n    }\r\n    document.title = \"Genforsbingo\";\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    localStorage.setItem(\"bingoState\", JSON.stringify(this.state));\r\n  }\r\n\r\n  handleCellChange = (value) => {\r\n    let cells = this.state.chosen_cells;\r\n    cells[value % 4][Math.floor(value / 4)] = !cells[value % 4][\r\n      Math.floor(value / 4)\r\n    ];\r\n    let bingo_rows = this.state.bingo_rows;\r\n    let bingo_cols = this.state.bingo_cols;\r\n    let bingo_diagonal_down = this.state.bingo_diagonal_down;\r\n    let bingo_diagonal_up = this.state.bingo_diagonal_up;\r\n    let is_bingo = false;\r\n    let is_full_bingo = cells.every(function (level2, i) {\r\n      return level2.every(function (bool) {\r\n        return bool;\r\n      });\r\n    });\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      if (!this.state.bingo_cols[i]) {\r\n        let colBingo = true;\r\n        for (let j = 0; j < 4; j++) {\r\n          if (!cells[i][j]) {\r\n            colBingo = false;\r\n          }\r\n        }\r\n        if (colBingo) {\r\n          bingo_cols[i] = true;\r\n          is_bingo = true;\r\n        }\r\n      }\r\n    }\r\n    if (!bingo_diagonal_down) {\r\n      let diagBingoDown = true;\r\n      for (let i = 0; i < 4; i++) {\r\n        if (!cells[i][i]) {\r\n          diagBingoDown = false;\r\n        }\r\n      }\r\n      if (diagBingoDown) {\r\n        bingo_diagonal_down = true;\r\n        is_bingo = true;\r\n      }\r\n    }\r\n    if (!bingo_diagonal_up) {\r\n      let diagBingoUp = true;\r\n      for (let i = 0; i < 4; i++) {\r\n        if (!cells[3 - i][i]) {\r\n          diagBingoUp = false;\r\n        }\r\n      }\r\n      if (diagBingoUp) {\r\n        bingo_diagonal_up = true;\r\n        is_bingo = true;\r\n      }\r\n    }\r\n    for (let i = 0; i < 4; i++) {\r\n      if (!this.state.bingo_rows[i]) {\r\n        let rowBingo = true;\r\n        for (let j = 0; j < 4; j++) {\r\n          if (!cells[j][i]) {\r\n            rowBingo = false;\r\n          }\r\n        }\r\n        if (rowBingo) {\r\n          bingo_rows[i] = true;\r\n          is_bingo = true;\r\n        }\r\n      }\r\n    }\r\n    is_bingo = is_full_bingo ? false : is_bingo;\r\n    const newState = {\r\n      text: this.state.text,\r\n      chosen_cells: cells,\r\n      bingo_rows: bingo_rows,\r\n      bingo_cols: bingo_cols,\r\n      bingo_diagonal_down: bingo_diagonal_down,\r\n      bingo_diagonal_up: bingo_diagonal_up,\r\n      is_bingo: is_bingo,\r\n      is_full_bingo: is_full_bingo,\r\n      bingo_id: this.state.bingo_id,\r\n    };\r\n    this.setState(newState);\r\n    localStorage.setItem(\"bingoState\", JSON.stringify(newState));\r\n  };\r\n\r\n  static generatePicks(bingoArray, numberOfLines) {\r\n    let picks = [];\r\n    for (let i = 0; i < 16; i++) {\r\n      let k = Math.floor(Math.random() * numberOfLines);\r\n      while (picks.indexOf(bingoArray[k]) > -1) {\r\n        k = Math.floor(Math.random() * numberOfLines);\r\n      }\r\n      picks[i] = bingoArray[k];\r\n    }\r\n    return picks;\r\n  }\r\n\r\n  generateBoard = () => {\r\n    let bingoArray = bingopile.options;\r\n    let pickedText = App.generatePicks(bingoArray, bingoArray.length);\r\n    let matrix = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      matrix[i] = [];\r\n      for (let j = 0; j < 4; j++) {\r\n        matrix[i][j] = false;\r\n      }\r\n    }\r\n    const initState = {\r\n      text: pickedText,\r\n      bingo_id: this.state.bingo_id + 16,\r\n      chosen_cells: matrix,\r\n      bingo_rows: [],\r\n      bingo_cols: [],\r\n      bingo_diagonal_down: false,\r\n      bingo_diagonal_up: false,\r\n    };\r\n    localStorage.setItem(\"bingoState\", JSON.stringify(initState));\r\n    this.setState(initState);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div\r\n          className={this.state.is_full_bingo ? \"popup show\" : \"popup\"}\r\n          onClick={() => this.setState({ is_full_bingo: false })}\r\n        >\r\n          <div className=\"bingotext\">\r\n            <img src={fireImg} alt=\"Abakus logo\" />\r\n            <img src={fireImg} alt=\"Abakus logo\" />\r\n            <img src={fireImg} alt=\"Abakus logo\" />\r\n          </div>\r\n          <div className=\"bingotext\">\r\n            <span>Gratulerer, du har vunnet Genfors!</span>\r\n          </div>\r\n          <p>(Trykk for å lukke)</p>\r\n        </div>\r\n        <div\r\n          className={this.state.is_bingo ? \"popup show\" : \"popup\"}\r\n          onClick={() => this.setState({ is_bingo: false })}\r\n        >\r\n          <div className=\"bingotext\">\r\n            <img src={fireImg} alt=\"Abakus logo\" />\r\n            <span>Bingo!</span>\r\n            <img src={fireImg} alt=\"Abakus logo\" />\r\n          </div>\r\n          <p>(Trykk for å lukke)</p>\r\n        </div>\r\n        <div\r\n          className={this.state.showRules ? \"popup show\" : \"popup\"}\r\n          onClick={() => this.setState({ showRules: false })}\r\n        >\r\n          <div className=\"textWindow\">\r\n            <p>Regler</p>\r\n            <br />\r\n            <p>1) Du har bingo om du er førstemann til fire på rad</p>\r\n            <br />\r\n            <p>2) Radene er vertikale, horisontale og diagonale</p>\r\n            <br />\r\n            <p>3) Den endelige bingoen får du når du har fylt brettet</p>\r\n            <br />\r\n            <p>\r\n              4) Vinneren er førstemann til å få alle fire bingoer (eller h*n\r\n              som har flest når genfors er over)\r\n            </p>\r\n          </div>\r\n          <p>(Trykk for å lukke)</p>\r\n        </div>\r\n        <div\r\n          className={this.state.confirmReset ? \"popup show\" : \"popup\"}\r\n          onClick={() => this.setState({ confirmReset: false })}\r\n        >\r\n          <div className=\"textWindow\">\r\n            <p>Er du sikker på at du vil bytte brett?</p>\r\n            <p>Dette kan ikke angres.</p>\r\n            <br />\r\n            <button onClick={() => this.generateBoard()}>\r\n              Ja, jeg er sikker\r\n            </button>\r\n          </div>\r\n          <p>(Eller trykk for å lukke)</p>\r\n        </div>\r\n\r\n        <div className=\"App-header\">\r\n          <span className=\"logo\">\r\n            <img src={fireImg} alt=\"Abakus logo\" />\r\n            <span> Genforsbingo</span>\r\n          </span>\r\n          <div className=\"newBoard\">\r\n            <button onClick={() => this.setState({ confirmReset: true })}>\r\n              Gi meg et nytt brett\r\n            </button>\r\n          </div>\r\n          <div className=\"rules\">\r\n            <button onClick={() => this.setState({ showRules: true })}>\r\n              Regler\r\n            </button>\r\n          </div>\r\n          <div className=\"github\">\r\n            <a href={\"https://github.com/magnhan/genfors-bingo-web\"}>\r\n              <img src={logo} alt=\"Github\" />\r\n            </a>\r\n          </div>\r\n        </div>\r\n        <div className=\"bingoBoard\">\r\n          {this.state.text.map((item, key = 0) => {\r\n            key++;\r\n            return (\r\n              <BingoCell\r\n                key={this.state.bingo_id + key}\r\n                id={key - 1}\r\n                content={item}\r\n                clicked={\r\n                  this.state.chosen_cells[(key - 1) % 4][\r\n                    Math.floor((key - 1) / 4)\r\n                  ]\r\n                }\r\n                handleCellChange={this.handleCellChange}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}